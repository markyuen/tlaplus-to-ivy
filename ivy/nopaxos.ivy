#lang ivy1.7

include total_order

###############################################################################
# System sorts                                                                #
###############################################################################

# Stratification graph:
#
# quorum_intersection : quorum -> replica
# consistincy : value, seq_t, quorum -> replica
#
# Topological sort:
type r_state = { st_normal, st_gap_commit, st_view_change }
type quorum
type value
type seq_t
type replica

individual no_op : value
individual one : seq_t
individual sequencer : seq_t
individual lead : replica

instantiate seq : total_order(seq_t)
axiom [val_one] seq.successive(seq.zero, one)

###############################################################################
# Object state                                                                #
###############################################################################

# Sequencer
relation s_seq_msg_num(S:seq_t, I:seq_t)

# Replica
relation r_log_len(R:replica, I:seq_t)
relation r_log(R:replica, I:seq_t, V:value)
relation r_sess_msg_num(R:replica, I:seq_t)
relation r_gap_commit_reps(R:replica, P:replica)
relation r_current_gap_slot(R:replica, I:seq_t)
relation r_replica_status(R:replica, S:r_state)

# Network
relation m_client_request(V:value)
relation m_marked_client_request(Dest:replica, V:value, SessMsgNum:seq_t)
relation m_request_reply(Sender:replica, Request:value, LogSlotNum:seq_t)
relation m_slot_lookup(Dest:replica, Sender:replica, SessMsgNum:seq_t)
relation m_gap_commit(Dest:replica, SlotNum:seq_t)
relation m_gap_commit_rep(Dest:replica, Sender:replica, SlotNum:seq_t)

###############################################################################
# Initial state                                                               #
###############################################################################

after init {
    s_seq_msg_num(S, I) := S = sequencer & I = one;

    r_log_len(R, I) := I = seq.zero;
    r_log(R, I, V) := false;
    r_sess_msg_num(R, I) := I = one;
    r_gap_commit_reps(R, P) := false;
    r_current_gap_slot(R, I) := I = seq.zero;
    r_replica_status(R, S) := S = st_normal;

    m_client_request(V) := false;
    m_marked_client_request(D, V, SMN) := false;
    m_request_reply(S, V, LSN) := false;
    m_slot_lookup(D, S, SMN) := false;
    m_gap_commit(D, SN) := false;
    m_gap_commit_rep(D, S, SN) := false;
}

###############################################################################
# Helpers                                                                     #
###############################################################################

relation member(R:replica, Q:quorum)
axiom [quorum_intersection]
    forall Q1:quorum, Q2:quorum.
        exists R:replica. (member(R, Q1) & member(R, Q2))

relation leader(R:replica)
axiom [single_leader] leader(R) <-> R = lead

action replace_item(r:replica, i:seq_t, v:value) = {
    if some len:seq_t. r_log_len(r, len) {
        if seq.le(i, seq.succ(len)) {
            if i = seq.succ(len) {
                r_log_len(r, len) := false;
                r_log_len(r, i) := true;
            }
            r_log(r, i, V) := false;
            r_log(r, i, v) := true;
        }
    }
}

action send_gap_commit(r:replica) = {
    if some len:seq_t. r_log_len(r, len) {
        ensure leader(r);
        ensure r_replica_status(r, st_normal);
        var slot := seq.succ(len);
        r_replica_status(r, st_normal) := false;
        r_replica_status(r, st_gap_commit) := true;
        r_gap_commit_reps(r, P) := false;
        r_current_gap_slot(r, I) := false;
        r_current_gap_slot(r, slot) := true;
        m_gap_commit(R, slot) := true;
    }
}

###############################################################################
# Transitions                                                                 #
###############################################################################

export action client_sends_request(v:value) = {
    require v ~= no_op;
    m_client_request(v) := true;
}

export action handle_client_request(m_value:value, s:seq_t) = {
    require s = sequencer;
    require m_client_request(m_value);
    if some slot:seq_t. s_seq_msg_num(s, slot) {
        m_marked_client_request(R, m_value, slot) := true;
        s_seq_msg_num(s, slot) := false;
        s_seq_msg_num(s, seq.succ(slot)) := true;
    }
}

export action handle_marked_client_request(
    r:replica, m_value:value, m_sess_msg_num:seq_t
) = {
    require m_marked_client_request(r, m_value, m_sess_msg_num);
    if some len:seq_t. r_log_len(r, len) {
        if some smn:seq_t. r_sess_msg_num(r, smn) {
            require r_replica_status(r, st_normal);
            if m_sess_msg_num = smn {
                r_log_len(r, len) := false;
                r_log_len(r, smn) := true;
                r_log(r, smn, m_value) := true;
                r_sess_msg_num(r, smn) := false;
                r_sess_msg_num(r, seq.succ(smn)) := true;
                m_request_reply(r, m_value, smn) := true;
            }
            # Note: we ignore the session terminated case
            if seq.lt(smn, m_sess_msg_num) {
                if leader(r) {
                    call send_gap_commit(r);
                } else {
                    m_slot_lookup(lead, r, smn) := true;
                }
            }
        }
    }
}

export action handle_slot_lookup(
    r:replica, m_sender:replica, m_sess_msg_num:seq_t
) = {
    require m_slot_lookup(r, m_sender, m_sess_msg_num);
    if some len:seq_t. r_log_len(r, len) {
        # Note: in TLA+ the slot is computed as
        #    logSlotNum == Len(vLog[r]) + 1 - (vSessMsgNum[r] - m.sessMsgNum)
        # which calculates the offset from the tail of the log;
        # however, with no view changes, this is equivalent to simply taking
        # the index of the incoming m.sessMsgNum
        var slot := m_sess_msg_num;
        require leader(r);
        require r_replica_status(r, st_normal);
        if seq.le(slot, len) {
            if some v:value. r_log(r, slot, v) {
                m_marked_client_request(m_sender, v, m_sess_msg_num) := true;
            } else {
                # Nothing to undo
            }
        }
        if slot = seq.succ(len) {
            call send_gap_commit(r);
        }
    }
}

export action handle_gap_commit(r:replica, m_slot_num:seq_t) = {
    require m_gap_commit(r, m_slot_num);
    if some len:seq_t. r_log_len(r, len) {
        if some smn:seq_t. r_sess_msg_num(r, smn) {
            require seq.le(m_slot_num, seq.succ(len));
            require r_replica_status(r, st_normal) |
                r_replica_status(r, st_gap_commit);
            call replace_item(r, m_slot_num, no_op);
            if seq.lt(len, m_slot_num) {
                r_sess_msg_num(r, smn) := false;
                r_sess_msg_num(r, seq.succ(smn)) := true;
            }
            m_gap_commit_rep(lead, r, m_slot_num) := true;
            m_request_reply(r, no_op, m_slot_num) := true;
        }
    }
}

export action handle_gap_commit_rep(
    r:replica, m_sender:replica, m_slot_num:seq_t
) = {
    require m_gap_commit_rep(r, m_sender, m_slot_num);
    require r_replica_status(r, st_gap_commit);
    require leader(r);
    require r_current_gap_slot(r, m_slot_num);
    r_gap_commit_reps(r, m_sender) := true;
    if exists Q:quorum.
        (forall P:replica. member(P, Q) -> r_gap_commit_reps(r, P)) {
        r_replica_status(r, st_gap_commit) := false;
        r_replica_status(r, st_normal) := true;
    }
}

###############################################################################
# Invariants                                                                  #
###############################################################################

# Replica relation-function coherence
invariant [sequencer_coherence]
    forall S:seq_t, I1: seq_t, I2:seq_t.
        (s_seq_msg_num(S, I1) & s_seq_msg_num(S, I2)) -> I1 = I2

invariant [ll_coherence]
    forall R:replica, I1:seq_t, I2:seq_t.
        (r_log_len(R, I1) & r_log_len(R, I2)) -> I1 = I2

invariant [log_coherence]
    forall R:replica, I:seq_t, V1:value, V2:value.
        (r_log(R, I, V1) & r_log(R, I, V2)) -> V1 = V2

invariant [smn_coherence]
    forall R:replica, I1:seq_t, I2:seq_t.
        (r_sess_msg_num(R, I1) & r_sess_msg_num(R, I2)) -> I1 = I2

invariant [cgs_coherence]
    forall R:replica, I1:seq_t, I2:seq_t.
        (r_current_gap_slot(R, I1) & r_current_gap_slot(R, I2)) -> I1 = I2

invariant [status_coherence]
    forall R:replica, S1:r_state, S2:r_state.
        (r_replica_status(R, S1) & r_replica_status(R, S2)) -> S1 = S2

# Force a single sequencer
invariant [single_sequencer_1]
    forall S:seq_t, I:seq_t.
        (S = sequencer & s_seq_msg_num(sequencer, I)) -> seq.le(one, I)

invariant [single_sequencer_2]
    forall S:seq_t, I:seq_t. S ~= sequencer -> ~s_seq_msg_num(S, I)

# Further log coherence
# 1. Log length must be >= any element index in log
# 2. Every slot <= log length is filled (induces a cycle)
invariant [log_valid_1]
    forall R:replica, I:seq_t, V:value, L:seq_t.
        (r_log(R, I, V) & r_log_len(R, L)) -> seq.le(I, L)

# invariant [log_valid_2]
#     forall R:replica, I:seq_t, J:seq_t.
#         (r_log_len(R, I) & seq.le(J, I)) -> exists V. r_log(R, J, V)

# Leader can only ever send one request reply which must match its log, note
# that this is not the case for other replicas
invariant [leader_reply_matches_log]
    forall R:replica, V:value, I:seq_t.
        (leader(R) & m_request_reply(R, V, I)) -> r_log(R, I, V)

# A client cannot suggest a no_op
invariant [client_no_op]
    ~m_client_request(no_op)

# A marked client request must originate from a client request unless a no_op
invariant [marked_req_non_trivial]
    forall R:replica, V:value, I:seq_t.
        (V ~= no_op & m_marked_client_request(R, V, I)) -> m_client_request(V)

# A request reply must originate from a client unless a no_op
invariant [request_reply_non_trivial]
    forall R:replica, V:value, I:seq_t.
        (V ~= no_op & m_request_reply(R, V, I)) -> m_client_request(V)

# A log element must originate from a marked client request unless a no_op
invariant [log_non_trivial]
    forall R:replica, V:value, I:seq_t.
        (V ~= no_op & r_log(R, I, V)) -> m_marked_client_request(R, V, I)

# A replica's sess msg num must be equal to log len + 1
invariant [valid_sess_msg_num]
    forall R:replica, I:seq_t, J:seq_t.
        (r_log_len(R, I) & r_sess_msg_num(R, J)) -> seq.successive(I, J)

# The lead replica will never send a gap commit to itself for a slot it has
# already chosen, if there does exist a gap commit message then that slot
# must be filled with a no_op
invariant [lead_gap_commits]
    forall R:replica, I:seq_t, J:seq_t.
        (leader(R) & r_log_len(R, I) & seq.le(J, I)) ->
            (~m_gap_commit(R, J) | r_log(R, J, no_op))

# Safety property
invariant [consistency]
    forall V1:value, V2:value, I:seq_t. (
        (exists Q:quorum. (member(lead, Q) &
            (forall R:replica. member(R, Q) -> m_request_reply(R, V1, I)))) &
        (exists Q:quorum. (member(lead, Q) &
            (forall R:replica. member(R, Q) -> m_request_reply(R, V2, I))))
        ) -> V1 = V2
